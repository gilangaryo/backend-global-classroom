// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// === ENUM ===
enum Role {
  ADMIN
}

enum ItemType {
  COURSE
  UNIT
  SUBUNIT
  LESSON
}

enum CheckoutStatus {
  PENDING
  PAID
  CANCELLED
  EXPIRED
}

// === MODELS ===

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  name         String?
  role         Role     @default(ADMIN)
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  checkouts CheckoutSession[]
  purchases Purchase[]
  reviews   Review[]

  @@map("user")
}

model Course {
  id          String  @id @default(uuid())
  title       String
  slug        String  @unique
  description String?
  price       Decimal @db.Decimal(10, 2)
  imageUrl    String?
  previewUrl  String?
  digitalUrl  String

  colorButton String
  isActive    Boolean   @default(true)
  deletedAt   DateTime?

  units      Unit[]
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])
  reviews    Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("course")
}

model Unit {
  id          String  @id @default(uuid())
  title       String
  slug        String  @unique
  previewUrl  String?
  digitalUrl  String?
  description String?
  price       Decimal @db.Decimal(10, 2)
  imageUrl    String?
  isActive    Boolean @default(true)

  courseId String
  course   Course    @relation(fields: [courseId], references: [id])
  subunits Subunit[]
  lessons  Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("unit")
}

model Subunit {
  id          String  @id @default(uuid())
  title       String
  slug        String  @unique
  previewUrl  String?
  digitalUrl  String?
  description String?
  price       Decimal @db.Decimal(10, 2)
  imageUrl    String?
  isActive    Boolean @default(true)
  tag         String

  unitId  String
  unit    Unit     @relation(fields: [unitId], references: [id])
  lessons Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subunit")
}

model Lesson {
  id          String  @id @default(uuid())
  title       String
  slug        String  @unique
  description String
  isActive    Boolean @default(true)

  previewUrl String?
  digitalUrl String?
  price      Decimal @db.Decimal(10, 2)
  imageUrl   String?

  unitId    String?
  unit      Unit?    @relation(fields: [unitId], references: [id])
  subunitId String?
  subunit   Subunit? @relation(fields: [subunitId], references: [id])

  tag String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lesson")
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]

  @@map("category")
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
  @@map("review")
}

model Purchase {
  id     String @id @default(uuid())
  userId String

  user     User     @relation(fields: [userId], references: [id])
  itemType ItemType
  itemId   String
  price    Decimal  @db.Decimal(10, 2)

  createdAt DateTime @default(now())

  @@map("purchase")
}

model CheckoutSession {
  id              String         @id @default(uuid())
  stripeSessionId String         @unique
  status          CheckoutStatus @default(PENDING)
  amount          Float
  items           Json

  // Tambahan data user:
  customerEmail     String?
  customerFirstName String?
  customerLastName  String?
  customerCountry   String?

  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}
